#!/bin/bash
# Mock Claude for testing
# Read the input and generate a simple response based on query

input=$(cat)
query=$(echo "$input" | grep 'SEARCH QUERY:' | sed 's/.*SEARCH QUERY: "\(.*\)".*/\1/')

# Simple mock responses based on query
case "$query" in
    *"Anderson"*)
        cat << 'RESPONSE'
{
  "results": [
    {
      "name": "Anderson, James",
      "path": "A/Anderson, James",
      "role": "Test Role",
      "company": "Test Company",
      "relevance_score": 0.9,
      "explanation": "Name matches Anderson"
    },
    {
      "name": "Anderson, Sarah", 
      "path": "A/Anderson, Sarah",
      "role": "Test Role",
      "company": "Test Company", 
      "relevance_score": 0.85,
      "explanation": "Name matches Anderson"
    }
  ],
  "total_matches": 2
}
RESPONSE
        ;;
    *"technology"*)
        cat << 'RESPONSE'
{
  "results": [
    {
      "name": "Tech, Tom",
      "path": "T/Tech, Tom", 
      "role": "Chief Technology Officer",
      "company": "Test Company",
      "relevance_score": 0.95,
      "explanation": "Role matches technology query"
    }
  ],
  "total_matches": 1
}
RESPONSE
        ;;
    *"nonexistent"*)
        cat << 'RESPONSE'
{
  "results": [],
  "total_matches": 0
}
RESPONSE
        ;;
    *)
        cat << 'RESPONSE'
{
  "results": [],
  "total_matches": 0
}
RESPONSE
        ;;
esac

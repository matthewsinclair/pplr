#!/bin/bash

# USAGE: Check system health and validate pplr installation
# USAGE: [--fix] Attempt to fix common issues automatically

# Default location of PPLR_DIR if not already set
: "${PPLR_DATA:=$HOME/Dropbox/Career/People}"
: "${PPLR_DIR:=$PPLR_DATA}"
: "${PPLR_ROOT:=$(dirname "$(dirname "$(readlink -f "$0" 2>/dev/null || echo "$0")")")}"
: "${PPLR_BIN_DIR:=$PPLR_ROOT/bin}"
: "${PPLR_TEMPLATE_DIR:=$PPLR_ROOT/templates}"

# Parse command line arguments
fix_mode=0
while [[ $# -gt 0 ]]; do
    case $1 in
        --fix)
            fix_mode=1
            shift
            ;;
        *)
            echo "Usage: $(basename "$0") [--fix]"
            exit 1
            ;;
    esac
done

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Counters
errors=0
warnings=0
fixed=0

# Helper functions
check_pass() {
    echo -e "${GREEN}✓${NC} $1"
}

check_fail() {
    echo -e "${RED}✗${NC} $1"
    ((errors++))
}

check_warn() {
    echo -e "${YELLOW}⚠${NC} $1"
    ((warnings++))
}

check_fixed() {
    echo -e "${GREEN}✓${NC} $1 (fixed)"
    ((fixed++))
}

echo "pplr doctor - System Health Check"
echo "================================="
echo

# 1. Check environment variables
echo "Environment Variables:"
if [ -n "$PPLR_DATA" ]; then
    check_pass "PPLR_DATA is set: $PPLR_DATA"
else
    check_warn "PPLR_DATA not set (using default: $HOME/Dropbox/Career/People)"
fi

if [ -n "$PPLR_ROOT" ]; then
    check_pass "PPLR_ROOT is set: $PPLR_ROOT"
else
    check_fail "PPLR_ROOT not set"
fi

if [ -n "$PPLR_BIN_DIR" ]; then
    check_pass "PPLR_BIN_DIR is set: $PPLR_BIN_DIR"
else
    check_fail "PPLR_BIN_DIR not set"
fi
echo

# 2. Check directory structure
echo "Directory Structure:"
if [ -d "$PPLR_DATA" ]; then
    check_pass "Data directory exists: $PPLR_DATA"
    
    # Check for A-Z directories
    missing_letters=""
    for letter in {A..Z}; do
        if [ ! -d "$PPLR_DATA/$letter" ]; then
            missing_letters+="$letter "
        fi
    done
    
    if [ -z "$missing_letters" ]; then
        check_pass "All A-Z directories present"
    else
        if [ $fix_mode -eq 1 ]; then
            for letter in $missing_letters; do
                mkdir -p "$PPLR_DATA/$letter"
            done
            check_fixed "Created missing directories: $missing_letters"
        else
            check_warn "Missing directories: $missing_letters (use --fix to create)"
        fi
    fi
    
    # Check .index directory
    if [ -d "$PPLR_DATA/.index" ]; then
        check_pass ".index directory exists"
    else
        if [ $fix_mode -eq 1 ]; then
            mkdir -p "$PPLR_DATA/.index"
            check_fixed "Created .index directory"
        else
            check_fail ".index directory missing (use --fix to create)"
        fi
    fi
else
    check_fail "Data directory not found: $PPLR_DATA"
fi

if [ -d "$PPLR_ROOT" ]; then
    check_pass "Code directory exists: $PPLR_ROOT"
else
    check_fail "Code directory not found: $PPLR_ROOT"
fi

if [ -d "$PPLR_BIN_DIR" ]; then
    check_pass "Bin directory exists: $PPLR_BIN_DIR"
else
    check_fail "Bin directory not found: $PPLR_BIN_DIR"
fi

if [ -d "$PPLR_TEMPLATE_DIR" ]; then
    check_pass "Template directory exists: $PPLR_TEMPLATE_DIR"
else
    check_warn "Template directory not found: $PPLR_TEMPLATE_DIR"
fi
echo

# 3. Check dependencies
echo "Dependencies:"

# Check for jq
if command -v jq >/dev/null 2>&1; then
    check_pass "jq is installed ($(jq --version))"
else
    check_fail "jq not found (required for JSON processing)"
fi

# Check for Claude CLI
if command -v claude >/dev/null 2>&1; then
    # Check if it's the real Claude or a mock
    if [ -f "$HOME/.claude/local/claude" ] && grep -q "Mock claude" "$HOME/.claude/local/claude" 2>/dev/null; then
        if [ $fix_mode -eq 1 ]; then
            rm -f "$HOME/.claude/local/claude"
            check_fixed "Removed mock Claude from $HOME/.claude/local/"
        else
            check_fail "Mock Claude detected at $HOME/.claude/local/claude (use --fix to remove)"
        fi
    else
        check_pass "Claude CLI is available"
    fi
else
    check_warn "Claude CLI not found (AI features will not work)"
fi

# Check bash version
bash_version=$(bash --version | head -1 | sed -E 's/.*version ([0-9]+\.[0-9]+).*/\1/')
bash_major=$(echo $bash_version | cut -d. -f1)
if [ -n "$bash_major" ] && [ "$bash_major" -ge 4 ]; then
    check_pass "Bash version $bash_version (>=4.0 required)"
else
    check_fail "Bash version $bash_version (<4.0, upgrade required)"
fi
echo

# 4. Check index files
echo "Index Files:"
if [ -f "$PPLR_DATA/.index/index.json" ]; then
    if jq . "$PPLR_DATA/.index/index.json" >/dev/null 2>&1; then
        people_count=$(jq '.people | to_entries | map(.value | length) | add' "$PPLR_DATA/.index/index.json" 2>/dev/null || echo "0")
        check_pass "index.json is valid (contains $people_count people)"
    else
        check_fail "index.json is invalid JSON"
    fi
else
    if [ $fix_mode -eq 1 ]; then
        "$PPLR_BIN_DIR/pplr" reindex >/dev/null 2>&1
        check_fixed "Generated index.json"
    else
        check_warn "index.json not found (run 'pplr reindex' to generate)"
    fi
fi

if [ -f "$PPLR_DATA/.index/index.md" ]; then
    check_pass "index.md exists"
else
    if [ $fix_mode -eq 1 ]; then
        "$PPLR_BIN_DIR/pplr" reindex >/dev/null 2>&1
        check_fixed "Generated index.md"
    else
        check_warn "index.md not found (run 'pplr reindex' to generate)"
    fi
fi

if [ -f "$PPLR_DATA/.index/tags_index.json" ]; then
    if jq . "$PPLR_DATA/.index/tags_index.json" >/dev/null 2>&1; then
        tag_count=$(jq '.people | length' "$PPLR_DATA/.index/tags_index.json" 2>/dev/null || echo "0")
        check_pass "tags_index.json is valid ($tag_count people with tags)"
    else
        check_fail "tags_index.json is invalid JSON"
    fi
else
    check_warn "tags_index.json not found (AI search will not work)"
fi
echo

# 5. Check for common issues
echo "Common Issues:"

# Check for old Index directories
old_index_count=0
while IFS= read -r dir; do
    ((old_index_count++))
done < <(find "$PPLR_DATA" -type d -name "Index" -path "*/[A-Z]/*/Index" 2>/dev/null)

if [ $old_index_count -eq 0 ]; then
    check_pass "No old Index/ directories found"
else
    if [ $fix_mode -eq 1 ]; then
        find "$PPLR_DATA" -type d -name "Index" -path "*/[A-Z]/*/Index" -exec rm -rf {} + 2>/dev/null
        check_fixed "Removed $old_index_count old Index/ directories"
    else
        check_warn "Found $old_index_count old Index/ directories (use --fix to remove)"
    fi
fi

# Check for people without About files
people_without_about=0
total_people=0
while IFS= read -r person_dir; do
    ((total_people++))
    person_name=$(basename "$person_dir")
    # Extract firstname and surname from "Surname, Firstname" format
    surname=$(echo "$person_name" | cut -d',' -f1 | sed 's/^ *//;s/ *$//')
    firstname=$(echo "$person_name" | cut -d',' -f2 | sed 's/^ *//;s/ *$//')
    
    # Check for About file with correct naming
    if [ ! -f "$person_dir/About/$firstname $surname (About).md" ]; then
        ((people_without_about++))
    fi
done < <(find "$PPLR_DATA" -mindepth 2 -maxdepth 2 -type d -path "$PPLR_DATA/[A-Z]/*" ! -name "_*" 2>/dev/null)

if [ $people_without_about -eq 0 ]; then
    check_pass "All people have About files"
else
    check_warn "$people_without_about of $total_people people missing About files"
fi

# Check for executable permissions
missing_exec=""
for script in "$PPLR_BIN_DIR"/pplr*; do
    if [ -f "$script" ] && [ ! -x "$script" ]; then
        missing_exec+="$(basename "$script") "
    fi
done

if [ -z "$missing_exec" ]; then
    check_pass "All scripts are executable"
else
    if [ $fix_mode -eq 1 ]; then
        chmod +x "$PPLR_BIN_DIR"/pplr*
        check_fixed "Made scripts executable: $missing_exec"
    else
        check_fail "Scripts not executable: $missing_exec (use --fix to repair)"
    fi
fi
echo

# 6. Summary
echo "Summary:"
echo "========"
if [ $errors -eq 0 ] && [ $warnings -eq 0 ]; then
    echo -e "${GREEN}All checks passed!${NC} Your pplr installation is healthy."
else
    echo -e "Found ${RED}$errors errors${NC} and ${YELLOW}$warnings warnings${NC}"
    if [ $fix_mode -eq 1 ]; then
        echo -e "Fixed ${GREEN}$fixed issues${NC}"
    elif [ $errors -gt 0 ] || [ $warnings -gt 0 ]; then
        echo -e "\nRun '$(basename "$0") --fix' to attempt automatic fixes"
    fi
fi

# Exit with error code if there were errors
exit $errors
#!/bin/bash

# USAGE: Natural language search across people using Claude AI
# USAGE: <query> natural language query to search for
# Uses tags_index.json for fast, intelligent search

## Default location of PPLR_DIR if not already set
: "${PPLR_DATA:=$HOME/Dropbox/Career/People}"
: "${PPLR_DIR:=$PPLR_DATA}"
: "${PPLR_ROOT:=$(dirname "$(dirname "$(readlink -f "$0" 2>/dev/null || echo "$0")")")}"
: "${PPLR_BIN_DIR:=$PPLR_ROOT/bin}"
: "${PPLR_TEMPLATE_DIR:=$PPLR_ROOT/templates}"

# Check if query is provided
if [ -z "$1" ]; then
  echo "Usage: pplr search <natural-language-query>"
  echo "Examples:"
  echo "  pplr search \"people who work in film production\""
  echo "  pplr search \"fintech founders\""
  echo "  pplr search \"engineers I should reconnect with\""
  echo "  pplr search \"investors in AI\""
  exit 1
fi

# Parse arguments - combine all args into query
query="$*"

# Main execution
echo "Searching for: $query"
echo ""

# Function for Claude-powered search using tags index
claude_search() {
  local search_query="$1"
  
  # Check if tags index exists
  local tags_index="$PPLR_DIR/.index/tags_index.json"
  if [ ! -f "$tags_index" ]; then
    echo "Error: Tags index not found at $tags_index"
    echo "Run 'pplr reindex' to create the search index."
    exit 1
  fi
  
  # Check if Claude CLI is available
  if ! command -v claude >/dev/null 2>&1; then
    echo "Error: Claude CLI not found. Please install Claude CLI to use natural language search."
    echo "Falling back to basic tag search..."
    fallback_search "$search_query"
    return
  fi
  
  # Create prompt for Claude
  local prompt_file=$(mktemp)
  cat > "$prompt_file" << 'EOF'
You are helping search through a professional network database. Below is a JSON index containing information about people, including their roles, companies, and AI-generated tags.

SEARCH QUERY: "QUERY_PLACEHOLDER"

PEOPLE DATA:
DATA_PLACEHOLDER

Your task:
1. Analyze the search query to understand what the user is looking for
2. Find the most relevant people based on:
   - Profile tags (skills, roles, industries)
   - Meeting tags (discussion topics, interactions)
   - Role and company information
   - Semantic similarity to the query

3. Return results ranked by relevance (most relevant first)
4. For each result, briefly explain why it matches

Respond ONLY with valid JSON in this format:
{
  "results": [
    {
      "name": "Surname, Firstname",
      "path": "relative/path",
      "role": "person's role",
      "company": "company name",
      "relevance_score": 0.95,
      "explanation": "Brief explanation of why this person matches"
    }
  ],
  "total_matches": 5
}

Include up to 10 most relevant matches. Use relevance_score from 0.0 to 1.0.
EOF
  
  # Insert the query and data
  local tags_content=$(cat "$tags_index")
  sed -i.bak "s/QUERY_PLACEHOLDER/$search_query/g" "$prompt_file"
  
  # Create final prompt with data
  local final_prompt=$(mktemp)
  awk -v data_file="$tags_index" '
    /DATA_PLACEHOLDER/ {
      system("cat " data_file)
      next
    }
    {print}
  ' "$prompt_file" > "$final_prompt"
  
  # Start spinner in background
  start_spinner() {
    local spinner_chars="⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏"
    local delay=0.1
    local i=0
    
    while true; do
      printf "\r🔍 Searching with Claude %s" "${spinner_chars:$i:1}"
      i=$(( (i + 1) % ${#spinner_chars} ))
      sleep $delay
    done
  }
  
  stop_spinner() {
    if kill $1 2>/dev/null; then
      wait $1 2>/dev/null
    fi
    printf "\r🔍 Searching with Claude... done!\n"
  }
  
  # Start spinner
  start_spinner &
  spinner_pid=$!
  
  # Call Claude
  response=$(cat "$final_prompt" | claude 2>&1)
  exit_code=$?
  
  # Stop spinner
  stop_spinner $spinner_pid
  
  # Cleanup temp files
  rm -f "$prompt_file" "$prompt_file.bak" "$final_prompt"
  
  if [ $exit_code -ne 0 ]; then
    echo "Error calling Claude: $response"
    echo "Falling back to basic tag search..."
    fallback_search "$search_query"
    return
  fi
  
  # Parse and display results
  local json_response=$(echo "$response" | awk '/^{/,/^}/' | grep -v "^[[:space:]]*$")
  
  if ! echo "$json_response" | jq . >/dev/null 2>&1; then
    echo "Error: Invalid JSON response from Claude"
    echo "Raw response: $response"
    echo "Falling back to basic tag search..."
    fallback_search "$search_query"
    return
  fi
  
  # Display results
  local total_matches=$(echo "$json_response" | jq -r '.total_matches // 0')
  if [ "$total_matches" -eq 0 ]; then
    echo "No matches found for: $search_query"
    echo ""
    echo "Try different keywords or check 'pplr help' for search tips."
    return
  fi
  
  echo "Found $total_matches relevant matches:"
  echo ""
  
  echo "$json_response" | jq -r --arg pplr_dir "$PPLR_DIR" '.results[] | 
    "👤 [" + .name + "](<" + $pplr_dir + "/" + .path + "/About/" + (.name | gsub(" "; " ")) + " \\(About\\).md>)" + 
    (if .role != "" then "\n   " + .role else "" end) +
    (if .company != "" then "\n   at " + .company else "" end) +
    "\n   → " + .explanation +
    (if .relevance_score then "\n   🎯 Relevance: " + (.relevance_score * 100 | floor | tostring) + "%" else "" end) +
    "\n"'
}

# Fallback search function (basic tag matching)
fallback_search() {
  local search_query="$1"
  local found_any=0
  
  echo "Using fallback search (basic keyword matching)..."
  echo ""
  
  # Convert query to lowercase for case-insensitive matching
  search_lower=$(echo "$search_query" | tr '[:upper:]' '[:lower:]')
  
  # Search using tags index if available
  local tags_index="$PPLR_DIR/.index/tags_index.json"
  if [ -f "$tags_index" ]; then
    # Use jq to find matching people and deduplicate
    local matches=$(jq -r --arg query "$search_lower" --arg pplr_dir "$PPLR_DIR" '
      [.people[] | 
       select(
         any(.profile_tags[]?; . | ascii_downcase | contains($query)) or
         any(.meeting_tags[]?; . | ascii_downcase | contains($query)) or
         (.role | ascii_downcase | contains($query)) or
         (.company | ascii_downcase | contains($query)) or
         (.name | ascii_downcase | contains($query))
       )] | 
       unique_by(.name) |
       .[] |
       "👤 [" + .name + "](<" + $pplr_dir + "/" + .path + "/About/" + (.name | gsub(" "; " ")) + " \\(About\\).md>)" +
       (if .role != "" then "\n   " + .role else "" end) +
       (if .company != "" then "\n   at " + .company else "" end) +
       "\n"
    ' "$tags_index")
    
    if [ -n "$matches" ]; then
      echo "$matches"
      found_any=1
    fi
  else
    # Fall back to searching individual tag files
    find "$PPLR_DIR" -path "*/_Templates" -prune -o -path "*/.index/tags.json" -type f -print | while read -r tag_file; do
      person_dir=$(dirname "$(dirname "$tag_file")")
      person_name=$(basename "$person_dir")
      
      # Get matching tags
      profile_matches=$(cat "$tag_file" | jq -r '.profile_tags[]' 2>/dev/null | grep -i "$search_lower" || true)
      meeting_matches=$(cat "$tag_file" | jq -r '.meeting_tags[]' 2>/dev/null | grep -i "$search_lower" || true)
      
      if [ -n "$profile_matches" ] || [ -n "$meeting_matches" ]; then
        found_any=1
        
        # Get role and company from About file
        about_file=$(find "$person_dir/About" -name "*About*.md" -type f 2>/dev/null | head -1)
        if [ -f "$about_file" ]; then
          role=$(grep -E "^- *Role:" "$about_file" 2>/dev/null | sed 's/^- *Role: *//' | head -1)
          company=$(grep -E "^- *Company:" "$about_file" 2>/dev/null | sed 's/^- *Company: *//' | head -1)
        fi
        
        echo "👤 [$person_name]($PPLR_DIR/${person_dir#./}/About/$person_name (About).md)"
        [ -n "$role" ] && echo "   $role"
        [ -n "$company" ] && echo "   at $company"
        
        # Show matching tags
        if [ -n "$profile_matches" ]; then
          echo "   → Profile tags: $(echo $profile_matches | tr '\n' ', ' | sed 's/, $//')"
        fi
        if [ -n "$meeting_matches" ]; then
          echo "   → Meeting tags: $(echo $meeting_matches | tr '\n' ', ' | sed 's/, $//')"
        fi
        echo ""
      fi
    done
  fi
  
  if [ $found_any -eq 0 ]; then
    echo "No matches found."
    echo "Try different keywords or run 'pplr reindex' to refresh the search index."
  fi
}

# Main search logic - always use Claude search
claude_search "$query"
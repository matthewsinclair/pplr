#!/bin/bash

# USAGE: Text search through people files or tags
# USAGE: [options] <text> text to search for
# USAGE: -t, --tag    search in tag files instead of markdown files

## Default location of PPLR_DIR if not already set
: "${PPLR_DATA:=$HOME/Dropbox/Career/People}"
: "${PPLR_DIR:=$PPLR_DATA}"
: "${PPLR_ROOT:=$(dirname "$(dirname "$(readlink -f "$0" 2>/dev/null || echo "$0")")")}"
: "${PPLR_BIN_DIR:=$PPLR_ROOT/bin}"
: "${PPLR_TEMPLATE_DIR:=$PPLR_ROOT/templates}"

CURRENT_DIR=$(pwd)
cd $PPLR_DIR

# Parse arguments
search_tags=false
while [[ $# -gt 0 ]]; do
  case $1 in
    -t|--tag)
      search_tags=true
      shift
      ;;
    *)
      search_text="$1"
      shift
      break
      ;;
  esac
done

# Check if the text to search is provided
if [ -z "$search_text" ]; then
  echo "Usage: pplr grep [options] <text-to-search>"
  echo "Options:"
  echo "  -t, --tag    search in tag files instead of markdown files"
  exit 1
fi

# Function to format output like pplr search
format_output() {
  local file_path="$1"
  local match_text="$2"
  
  # Extract person info from path
  # Path format: /path/to/PPLR_DIR/A/Anderson, James/About/James Anderson (About).md
  local person_dir=$(dirname "$(dirname "$file_path")")
  local person_name=$(basename "$person_dir")
  
  # Get the relative path from PPLR_DIR
  local rel_path="${person_dir#$PPLR_DIR/}"
  
  # Output formatted result
  echo "ðŸ‘¤ [$person_name](<$PPLR_DIR/$rel_path/About/$person_name \\(About\\).md>)"
  
  # If searching tags, try to get role/company from the tags.json
  if [ "$search_tags" = true ] && [ -f "$person_dir/.index/tags.json" ]; then
    local role=$(jq -r '.role // ""' "$person_dir/.index/tags.json" 2>/dev/null)
    local company=$(jq -r '.company // ""' "$person_dir/.index/tags.json" 2>/dev/null)
    
    if [ -n "$role" ]; then
      echo "   $role"
    fi
    if [ -n "$company" ]; then
      echo "   at $company"
    fi
  else
    # For markdown files, try to extract role/company from About file
    local about_file="$person_dir/About/$person_name (About).md"
    if [ -f "$about_file" ]; then
      local role=$(grep "^Role:" "$about_file" | sed 's/^Role:[[:space:]]*//' | head -1)
      local company=$(grep "^Company:" "$about_file" | sed 's/^Company:[[:space:]]*//' | head -1)
      
      if [ -n "$role" ]; then
        echo "   $role"
      fi
      if [ -n "$company" ]; then
        echo "   at $company"
      fi
    fi
  fi
  
  # Show the matching context
  echo "   â†’ $match_text"
  echo ""
}

# Perform the search
if [ "$search_tags" = true ]; then
  # Search in tags.json files
  echo "Searching in tag files for: $search_text"
  echo ""
  
  # Find all tags.json files and search within them
  found_any=false
  while IFS= read -r -d '' tags_file; do
    # Search in the JSON content
    if grep -i "$search_text" "$tags_file" >/dev/null 2>&1; then
      # Extract matching content
      matches=$(grep -i "$search_text" "$tags_file" | head -3)
      format_output "$tags_file" "$(echo "$matches" | tr '\n' ' ' | sed 's/[[:space:]]*$//')"
      found_any=true
    fi
  done < <(find "$PPLR_DIR" -name "tags.json" -path "*/.index/*" -print0 2>/dev/null)
  
  if [ "$found_any" = false ]; then
    echo "No matches found in tag files."
  fi
else
  # Search in markdown files (original behavior)
  echo "Searching for: $search_text"
  echo ""
  
  # Use grep to find matches and process each result
  found_any=false
  while IFS=: read -r file_path line_num match_text; do
    # Skip if empty
    if [ -z "$file_path" ]; then
      continue
    fi
    
    # Format and display the result
    format_output "$file_path" "$match_text"
    found_any=true
  done < <(grep -rn --include="*.md" "$search_text" "$PPLR_DIR"/*/ 2>/dev/null)
  
  if [ "$found_any" = false ]; then
    echo "No matches found."
  fi
fi

cd $CURRENT_DIR